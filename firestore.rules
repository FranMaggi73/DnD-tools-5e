rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===========================
    // HELPER FUNCTIONS
    // ===========================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isCampaignDM(campaignId) {
      return get(/databases/$(database)/documents/events/$(campaignId)).data.dmId == request.auth.uid;
    }
    
    function isCampaignMember(campaignId) {
      return exists(/databases/$(database)/documents/event_members/$(request.auth.uid + '_' + campaignId));
    }
    
    function getCampaignFromEncounter(encounterId) {
      return get(/databases/$(database)/documents/encounters/$(encounterId)).data.campaignId;
    }
    
    // ===========================
    // USERS COLLECTION
    // ===========================
    
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Los usuarios no se eliminan
    }
    
    // ===========================
    // EVENTS/CAMPAIGNS COLLECTION
    // ===========================
    
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       request.resource.data.dmId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       resource.data.dmId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                       resource.data.dmId == request.auth.uid;
    }
    
    // ===========================
    // EVENT MEMBERS COLLECTION
    // ===========================
    
    match /event_members/{memberId} {
      allow read: if isAuthenticated();
      
      // Solo el DM puede agregar miembros
      allow create: if isAuthenticated() && 
                       isCampaignDM(request.resource.data.campaignId);
      
      // Solo el DM puede actualizar miembros
      allow update: if isAuthenticated() && 
                       isCampaignDM(resource.data.campaignId);
      
      // Solo el DM puede eliminar miembros (o backend en cascada)
      allow delete: if isAuthenticated() && 
                       isCampaignDM(resource.data.campaignId);
    }
    
    // ===========================
    // INVITATIONS COLLECTION
    // ===========================
    
    match /invitations/{invitationId} {
      // Solo el destinatario o el remitente pueden ver la invitación
      allow read: if isAuthenticated() && 
        (resource.data.toUserId == request.auth.uid || 
         resource.data.fromUserId == request.auth.uid);
      
      // Solo el DM puede crear invitaciones
      allow create: if isAuthenticated() && 
                       isCampaignDM(request.resource.data.campaignId);
      
      // Solo el destinatario puede actualizar (aceptar/rechazar)
      allow update: if isAuthenticated() && 
                       resource.data.toUserId == request.auth.uid;
      
      // Backend o remitente pueden eliminar
      allow delete: if isAuthenticated() && 
        (resource.data.toUserId == request.auth.uid || 
         resource.data.fromUserId == request.auth.uid);
    }
    
    // ===========================
    // CHARACTERS COLLECTION
    // ===========================
    
    match /characters/{characterId} {
      // Todos los miembros de la campaña pueden ver personajes
      allow read: if isAuthenticated();
      
      // Solo el dueño puede crear su personaje
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      
      // El dueño o el DM pueden actualizar
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         isCampaignDM(resource.data.campaignId));
      
      // El dueño o el DM pueden eliminar
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         isCampaignDM(resource.data.campaignId));
    }
    
    // ===========================
    // ENCOUNTERS COLLECTION
    // ===========================
    
    match /encounters/{encounterId} {
      // Todos los autenticados pueden ver encuentros
      allow read: if isAuthenticated();
      
      // Solo el DM puede crear encuentros
      allow create: if isAuthenticated() && 
                       isCampaignDM(request.resource.data.campaignId);
      
      // Solo el DM puede actualizar encuentros
      allow update: if isAuthenticated() && 
                       isCampaignDM(resource.data.campaignId);
      
      // Solo el DM puede eliminar encuentros
      allow delete: if isAuthenticated() && 
                       isCampaignDM(resource.data.campaignId);
    }
    
    // ===========================
    // COMBATANTS COLLECTION
    // ===========================
    
    match /combatants/{combatantId} {
      // Leer: todos los autenticados pueden ver combatientes
      allow read: if isAuthenticated();
      
      // Crear: solo el DM de la campaña del encuentro
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/encounters/$(request.resource.data.encounterId)) &&
        isCampaignDM(
          get(/databases/$(database)/documents/encounters/$(request.resource.data.encounterId)).data.campaignId
        );
      
      // Actualizar: solo el DM de la campaña
      allow update: if isAuthenticated() && 
        exists(/databases/$(database)/documents/encounters/$(resource.data.encounterId)) &&
        isCampaignDM(
          get(/databases/$(database)/documents/encounters/$(resource.data.encounterId)).data.campaignId
        );
      
      // Eliminar: solo el DM de la campaña
      allow delete: if isAuthenticated() && 
        exists(/databases/$(database)/documents/encounters/$(resource.data.encounterId)) &&
        isCampaignDM(
          get(/databases/$(database)/documents/encounters/$(resource.data.encounterId)).data.campaignId
        );
    }
    
    // ===========================
    // NOTES COLLECTION
    // ===========================
    
    match /notes/{noteId} {
      // Leer: autor O es compartida (cualquier autenticado puede ver notas compartidas)
      allow read: if isAuthenticated() && 
        (resource.data.authorId == request.auth.uid || 
         resource.data.isShared == true);
      
      // Crear: autenticado Y es el autor
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid;
      
      // Actualizar: solo el autor
      allow update: if isAuthenticated() && 
                       resource.data.authorId == request.auth.uid;
      
      // Eliminar: solo el autor
      allow delete: if isAuthenticated() && 
                       resource.data.authorId == request.auth.uid;
    }
    // ===========================
    // DENY ALL OTHER COLLECTIONS
    // ===========================
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}