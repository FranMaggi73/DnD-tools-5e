rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===========================
    // HELPER FUNCTIONS
    // ===========================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isCampaignDM(campaignId) {
      return get(/databases/$(database)/documents/events/$(campaignId)).data.dmId == request.auth.uid;
    }
    
    // ✅ FIX: Query-based membership check
    function isCampaignMember(campaignId) {
      return exists(/databases/$(database)/documents/event_members/$(request.auth.uid + '_' + campaignId)) ||
             existsAfter(/databases/$(database)/documents/event_members/$(request.auth.uid + '_' + campaignId));
    }
    
    // ✅ NUEVO: Verificar si existe CUALQUIER documento de membresía
    function isCampaignMemberAny(campaignId) {
      // Fallback: si la función específica falla, intentar con query
      return get(/databases/$(database)/documents/events/$(campaignId)).data.dmId == request.auth.uid ||
             get(/databases/$(database)/documents/events/$(campaignId)).data.playerIds.hasAny([request.auth.uid]);
    }
    
    function getCampaignFromEncounter(encounterId) {
      return get(/databases/$(database)/documents/encounters/$(encounterId)).data.campaignId;
    }
    
    // ===========================
    // USERS COLLECTION
    // ===========================
    
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false;
    }
    
    // ===========================
    // EVENTS/CAMPAIGNS COLLECTION
    // ===========================
    
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       request.resource.data.dmId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       resource.data.dmId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                       resource.data.dmId == request.auth.uid;
    }
    
    // ===========================
    // EVENT MEMBERS COLLECTION
    // ===========================
    
    match /event_members/{memberId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       isCampaignDM(request.resource.data.campaignId);
      
      allow update: if isAuthenticated() && 
                       isCampaignDM(resource.data.campaignId);
      
      allow delete: if isAuthenticated() && 
                       isCampaignDM(resource.data.campaignId);
    }
    
    // ===========================
    // INVITATIONS COLLECTION
    // ===========================
    
    match /invitations/{invitationId} {
      allow read: if isAuthenticated() && 
        (resource.data.toUserId == request.auth.uid || 
         resource.data.fromUserId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
                       isCampaignDM(request.resource.data.campaignId);
      
      allow update: if isAuthenticated() && 
                       resource.data.toUserId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
        (resource.data.toUserId == request.auth.uid || 
         resource.data.fromUserId == request.auth.uid);
    }
    
    // ===========================
    // CHARACTERS COLLECTION
    // ===========================
    
    match /characters/{characterId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         isCampaignDM(resource.data.campaignId));
      
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         isCampaignDM(resource.data.campaignId));
    }
    
    // ===========================
    // ENCOUNTERS COLLECTION
    // ===========================
    
    match /encounters/{encounterId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       isCampaignDM(request.resource.data.campaignId);
      
      allow update: if isAuthenticated() && 
                       isCampaignDM(resource.data.campaignId);
      
      allow delete: if isAuthenticated() && 
                       isCampaignDM(resource.data.campaignId);
    }
    
    // ===========================
    // COMBATANTS COLLECTION
    // ===========================
    
    match /combatants/{combatantId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/encounters/$(request.resource.data.encounterId)) &&
        isCampaignDM(
          get(/databases/$(database)/documents/encounters/$(request.resource.data.encounterId)).data.campaignId
        );
      
      allow update: if isAuthenticated() && 
        exists(/databases/$(database)/documents/encounters/$(resource.data.encounterId)) &&
        isCampaignDM(
          get(/databases/$(database)/documents/encounters/$(resource.data.encounterId)).data.campaignId
        );
      
      allow delete: if isAuthenticated() && 
        exists(/databases/$(database)/documents/encounters/$(resource.data.encounterId)) &&
        isCampaignDM(
          get(/databases/$(database)/documents/encounters/$(resource.data.encounterId)).data.campaignId
        );
    }
    
    // ===========================
    // NOTES COLLECTION - ✅ CORREGIDO
    // ===========================
    
    match /notes/{noteId} {
      // ✅ FIX: Leer notas usando campaignId directamente
      allow read: if isAuthenticated() && (
        // Autor puede leer siempre
        resource.data.authorId == request.auth.uid || 
        // Notas compartidas: verificar que sea DM o esté en playerIds
        (resource.data.isShared == true && isCampaignMemberAny(resource.data.campaignId))
      );
      
      // Crear: debe ser miembro Y ser el autor
      allow create: if isAuthenticated() && 
                      request.resource.data.authorId == request.auth.uid &&
                      isCampaignMemberAny(request.resource.data.campaignId);
      
      // Actualizar: solo el autor Y seguir siendo miembro
      allow update: if isAuthenticated() && 
                      resource.data.authorId == request.auth.uid &&
                      isCampaignMemberAny(resource.data.campaignId);
      
      // Eliminar: solo el autor
      allow delete: if isAuthenticated() && 
                      resource.data.authorId == request.auth.uid;
    }
    
    // ===========================
    // DENY ALL OTHER COLLECTIONS
    // ===========================
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}